// <auto-generated />
using System;
using EPSPlus.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EPSPlus.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250326131027_InitialCommit")]
    partial class InitialCommit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EPSPlus.Domain.Entities.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "068a1f92-0318-4bfd-8de8-8e3d07ed7ec1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@techcorp.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TECHCORP.COM",
                            NormalizedUserName = "TECHCORP_ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEO02aRMzc9uYn51vnI9lrz+mvny8CeFcvWnDaZ7d+O+CF8rWGXCKLQD30ot7vYbbOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc8f81e2-1a8d-438f-aec6-79e02b144ace",
                            TwoFactorEnabled = false,
                            UserName = "techcorp_admin"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17e9a59a-8eeb-4c29-a57d-eeb48710672d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@innovate.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@INNOVATE.COM",
                            NormalizedUserName = "INNOVATE_ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOKO/rtPgzDpGM79y1XJiqXpE55io6HT5uYvNMSrPu9xkpa2EWd+eqYiWeRRIiWdfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "defdc599-ac15-46ee-ace4-3e1553f20981",
                            TwoFactorEnabled = false,
                            UserName = "innovate_admin"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2cb6fd10-3945-4de1-a668-06d5960dfbe3",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "member1@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBER1@EXAMPLE.COM",
                            NormalizedUserName = "MEMBER_ONE",
                            PasswordHash = "AQAAAAIAAYagAAAAEHh2fPzSIqb5CfL+gEfTG1hWWZaTgfb1Z+K9fSgEY7pNMUrZNOfBqlw+DLULYVON5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfe8c973-91af-4db4-9730-f1293d771f2a",
                            TwoFactorEnabled = false,
                            UserName = "member_one"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a24975b-1c95-4444-b2c9-766840ef4808",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "member2@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBER2@EXAMPLE.COM",
                            NormalizedUserName = "MEMBER_TWO",
                            PasswordHash = "AQAAAAIAAYagAAAAELvcJ3bJzrH0xRev3MlG4486gFHF8nzyt9i/H7AvvTdgCvsxfdtxLqVRftpFSn5VvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9bf49cb9-b969-481e-b3d0-25b7fb90fca3",
                            TwoFactorEnabled = false,
                            UserName = "member_two"
                        });
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.BenefitEligibility", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EligibleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique()
                        .HasFilter("[MemberId] IS NOT NULL");

                    b.ToTable("BenefitEligibilities");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            EligibleDate = new DateTime(2030, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6626),
                            MemberId = "1",
                            Status = true
                        },
                        new
                        {
                            Id = "2",
                            EligibleDate = new DateTime(2028, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6645),
                            MemberId = "2",
                            Status = false
                        });
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Contribution", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ContributionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContributionType")
                        .HasColumnType("int");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Contributions");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Amount = 100.00m,
                            ContributionDate = new DateTime(2025, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6470),
                            ContributionType = 0,
                            MemberId = "1",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = "2",
                            Amount = 200.00m,
                            ContributionDate = new DateTime(2025, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6479),
                            ContributionType = 1,
                            MemberId = "2",
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Employer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CompanyName = "TechCorp",
                            CreatedAt = new DateTime(2025, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6263),
                            RegistrationNumber = "123456789",
                            UserId = "user1"
                        },
                        new
                        {
                            Id = "2",
                            CompanyName = "Innovate Ltd",
                            CreatedAt = new DateTime(2025, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6304),
                            RegistrationNumber = "987654321",
                            UserId = "user2"
                        });
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Member", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Age = 34,
                            CreatedAt = new DateTime(2025, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6376),
                            DateOfBirth = new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployerId = "1",
                            UserId = "user3"
                        },
                        new
                        {
                            Id = "2",
                            Age = 39,
                            CreatedAt = new DateTime(2025, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6389),
                            DateOfBirth = new DateTime(1985, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployerId = "2",
                            UserId = "user4"
                        });
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContributionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContributionId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ContributionId = "1",
                            CreatedAt = new DateTime(2025, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6568),
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6569)
                        },
                        new
                        {
                            Id = "2",
                            ContributionId = "2",
                            CreatedAt = new DateTime(2025, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6579),
                            Status = 2,
                            UpdatedAt = new DateTime(2025, 3, 26, 14, 10, 26, 598, DateTimeKind.Local).AddTicks(6580)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Admin", b =>
                {
                    b.HasOne("EPSPlus.Domain.Entities.ApplicationUser", "User")
                        .WithOne("AdminDetails")
                        .HasForeignKey("EPSPlus.Domain.Entities.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.BenefitEligibility", b =>
                {
                    b.HasOne("EPSPlus.Domain.Entities.Member", "Member")
                        .WithOne("BenefitEligibility")
                        .HasForeignKey("EPSPlus.Domain.Entities.BenefitEligibility", "MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Contribution", b =>
                {
                    b.HasOne("EPSPlus.Domain.Entities.Member", "Member")
                        .WithMany("Contributions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Employer", b =>
                {
                    b.HasOne("EPSPlus.Domain.Entities.ApplicationUser", "User")
                        .WithOne("EmployerDetails")
                        .HasForeignKey("EPSPlus.Domain.Entities.Employer", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Member", b =>
                {
                    b.HasOne("EPSPlus.Domain.Entities.Employer", "Employer")
                        .WithMany("Members")
                        .HasForeignKey("EmployerId");

                    b.HasOne("EPSPlus.Domain.Entities.ApplicationUser", "User")
                        .WithOne("MemberDetails")
                        .HasForeignKey("EPSPlus.Domain.Entities.Member", "UserId");

                    b.Navigation("Employer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("EPSPlus.Domain.Entities.Contribution", "Contribution")
                        .WithMany("Transactions")
                        .HasForeignKey("ContributionId");

                    b.Navigation("Contribution");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EPSPlus.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EPSPlus.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPSPlus.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EPSPlus.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("AdminDetails");

                    b.Navigation("EmployerDetails");

                    b.Navigation("MemberDetails");
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Contribution", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Employer", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("EPSPlus.Domain.Entities.Member", b =>
                {
                    b.Navigation("BenefitEligibility");

                    b.Navigation("Contributions");
                });
#pragma warning restore 612, 618
        }
    }
}
